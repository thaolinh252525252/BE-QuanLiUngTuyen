# from pymongo import MongoClient
# from datetime import datetime
# import logging

# # C·∫•u h√¨nh logging
# logging.basicConfig(level=logging.INFO)
# logger = logging.getLogger(__name__)

# try:
#     # K·∫øt n·ªëi t·ªõi MongoDB
#     client = MongoClient("mongodb://localhost:27017/", serverSelectionTimeoutMS=5000)
#     client.server_info()  # Ki·ªÉm tra k·∫øt n·ªëi
#     logger.info("‚úÖ K·∫øt n·ªëi t·ªõi MongoDB th√†nh c√¥ng")
# except Exception as e:
#     logger.error(f"‚ùå L·ªói k·∫øt n·ªëi t·ªõi MongoDB: {str(e)}")
#     raise

# # Ch·ªçn database v√† collection
# db = client["tuyendung"]
# collection = db["mo_ta_cong_viec"]

# try:
#     # X√≥a to√†n b·ªô m√¥ t·∫£ c≈© (ch·ªâ th·ª±c hi·ªán n·∫øu c·∫ßn kh·ªüi t·∫°o l·∫°i d·ªØ li·ªáu)
#     delete_confirm = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô d·ªØ li·ªáu c≈© trong collection 'mo_ta_cong_viec'? (y/n): ")
#     if delete_confirm.lower() == 'y':
#         result = collection.delete_many({})
#         logger.info(f"üóëÔ∏è ƒê√£ x√≥a {result.deleted_count} b·∫£n ghi c≈©")
#     else:
#         logger.info("‚õî Kh√¥ng x√≥a d·ªØ li·ªáu c≈©")

#     # D·ªØ li·ªáu ƒë·ªÉ ch√®n
#     job_descriptions = [
#         {
#             "vi_tri": "L·∫≠p tr√¨nh vi√™n Front-end",
#             "mo_ta": "Ph√°t tri·ªÉn giao di·ªán website v·ªõi ReactJS, t·ªëi ∆∞u hi·ªáu su·∫•t v√† SEO",
#             "yeu_cau": "Kinh nghi·ªám 2 nƒÉm v·ªõi ReactJS, Redux, TailwindCSS, hi·ªÉu RESTful API, CI/CD",
#             "han_nop": datetime(2025, 7, 30).isoformat()  # Chuy·ªÉn th√†nh chu·ªói ISO ƒë·ªÉ ƒë·ªìng nh·∫•t v·ªõi API
#         },
#         {
#             "vi_tri": "Nh√¢n vi√™n Kinh doanh",
#             "mo_ta": "T√¨m ki·∫øm v√† ph√°t tri·ªÉn kh√°ch h√†ng m·ªõi, duy tr√¨ m·ªëi quan h·ªá v·ªõi kh√°ch h√†ng hi·ªán t·∫°i, ƒë·∫°t ch·ªâ ti√™u doanh s·ªë ƒë∆∞·ª£c giao.",
#             "yeu_cau": "K·ªπ nƒÉng giao ti·∫øp, ƒë√†m ph√°n, thuy·∫øt ph·ª•c kh√°ch h√†ng; s·ª≠ d·ª•ng th√†nh th·∫°o tin h·ªçc vƒÉn ph√≤ng (Word, Excel); kinh nghi·ªám s·ª≠ d·ª•ng CRM l√† l·ª£i th·∫ø; kh·∫£ nƒÉng l·∫≠p k·∫ø ho·∫°ch v√† ch·ªãu √°p l·ª±c c√¥ng vi·ªác; tr√¨nh ƒë·ªô ti·∫øng Anh (TOEIC 600 tr·ªü l√™n) l√† ƒëi·ªÉm c·ªông.",
#             "han_nop": datetime(2025, 7, 30).isoformat()
#         },
#         {
#             "vi_tri": "K·ªπ s∆∞ An to√†n th√¥ng tin",
#             "mo_ta": "Ph√¢n t√≠ch v√† b·∫£o v·ªá h·ªá th·ªëng CNTT kh·ªèi c√°c m·ªëi ƒëe d·ªça an ninh m·∫°ng, tri·ªÉn khai c√°c bi·ªán ph√°p b·∫£o m·∫≠t, gi√°m s√°t v√† x·ª≠ l√Ω s·ª± c·ªë b·∫£o m·∫≠t.",
#             "yeu_cau": "Kinh nghi·ªám 2 nƒÉm trong lƒ©nh v·ª±c an to√†n th√¥ng tin, th√†nh th·∫°o c√°c c√¥ng c·ª• nh∆∞ Wireshark, Metasploit, hi·ªÉu bi·∫øt v·ªÅ firewall, IDS/IPS, c√≥ ch·ª©ng ch·ªâ nh∆∞ CEH, CISSP l√† l·ª£i th·∫ø.",
#             "han_nop": datetime(2025, 7, 30).isoformat()
#         },
#         {
#             "vi_tri": "L·∫≠p tr√¨nh vi√™n Full-stack",
#             "mo_ta": "Ph√°t tri·ªÉn c·∫£ giao di·ªán ng∆∞·ªùi d√πng (Front-end) v√† h·ªá th·ªëng backend cho c√°c ·ª©ng d·ª•ng web, t√≠ch h·ª£p API v√† c∆° s·ªü d·ªØ li·ªáu.",
#             "yeu_cau": "Kinh nghi·ªám 2-3 nƒÉm v·ªõi Front-end (ReactJS, VueJS, TailwindCSS) v√† Backend (Node.js, Python, MongoDB ho·∫∑c PostgreSQL), hi·ªÉu bi·∫øt v·ªÅ RESTful API, GraphQL, CI/CD.",
#             "han_nop": datetime(2025, 7, 30).isoformat()
#         },
#         {
#             "vi_tri": "Chuy√™n vi√™n Ki·ªÉm th·ª≠ ph·∫ßn m·ªÅm",
#             "mo_ta": "Ch·ªãu tr√°ch nhi·ªám ki·ªÉm th·ª≠ v√† ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng c√°c s·∫£n ph·∫©m ph·∫ßn m·ªÅm. Ph√°t hi·ªán l·ªói, b√°o c√°o v√† theo d√µi qu√° tr√¨nh kh·∫Øc ph·ª•c. X√¢y d·ª±ng v√† th·ª±c hi·ªán c√°c k·ªãch b·∫£n ki·ªÉm th·ª≠ t·ª± ƒë·ªông v√† th·ªß c√¥ng.",
#             "yeu_cau": "C√≥ √≠t nh·∫•t 2 nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c ki·ªÉm th·ª≠ ph·∫ßn m·ªÅm. Th√†nh th·∫°o c√°c c√¥ng c·ª• ki·ªÉm th·ª≠ nh∆∞ Selenium, JUnit, TestNG. Hi·ªÉu bi·∫øt v·ªÅ quy tr√¨nh ph√°t tri·ªÉn ph·∫ßn m·ªÅm Agile/Scrum. K·ªπ nƒÉng ph√¢n t√≠ch v√† gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ t·ªët.",
#             "han_nop": datetime(2025, 7, 20).isoformat()
#         },
#         {
#             "vi_tri": "Chuy√™n vi√™n Ph√¢n t√≠ch D·ªØ li·ªáu",
#             "mo_ta": "Thu th·∫≠p, x·ª≠ l√Ω v√† ph√¢n t√≠ch d·ªØ li·ªáu ƒë·ªÉ h·ªó tr·ª£ ra quy·∫øt ƒë·ªãnh kinh doanh. X√¢y d·ª±ng c√°c b√°o c√°o v√† dashboard tr·ª±c quan h√≥a d·ªØ li·ªáu. Ph√°t hi·ªán xu h∆∞·ªõng v√† ƒë∆∞a ra c√°c ƒë·ªÅ xu·∫•t d·ª±a tr√™n d·ªØ li·ªáu.",
#             "yeu_cau": "T·ªët nghi·ªáp ƒë·∫°i h·ªçc chuy√™n ng√†nh To√°n, Th·ªëng k√™, CNTT ho·∫∑c t∆∞∆°ng ƒë∆∞∆°ng. Th√†nh th·∫°o SQL, Python/R v√† c√°c c√¥ng c·ª• ph√¢n t√≠ch d·ªØ li·ªáu nh∆∞ Pandas, NumPy. Kinh nghi·ªám v·ªõi c√°c c√¥ng c·ª• BI nh∆∞ Power BI, Tableau. K·ªπ nƒÉng truy·ªÅn ƒë·∫°t th√¥ng tin v√† k·ªÉ chuy·ªán b·∫±ng d·ªØ li·ªáu.",
#             "han_nop": datetime(2025, 6, 20).isoformat()
#         },
#         {
#             "vi_tri": "K·ªπ s∆∞ DevOps",
#             "mo_ta": "X√¢y d·ª±ng v√† duy tr√¨ c∆° s·ªü h·∫° t·∫ßng CI/CD. T·ª± ƒë·ªông h√≥a quy tr√¨nh tri·ªÉn khai v√† v·∫≠n h√†nh. Qu·∫£n l√Ω h·ªá th·ªëng cloud v√† container. T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t v√† ƒë·ªô tin c·∫≠y c·ªßa h·ªá th·ªëng.",
#             "yeu_cau": "Kinh nghi·ªám 3+ nƒÉm v·ªõi c√°c c√¥ng c·ª• CI/CD nh∆∞ Jenkins, GitLab CI. Th√†nh th·∫°o Docker, Kubernetes v√† c√°c n·ªÅn t·∫£ng cloud (AWS, Azure, GCP). Ki·∫øn th·ª©c v·ªÅ Infrastructure as Code (Terraform, Ansible). K·ªπ nƒÉng scripting t·ªët (Bash, Python).",
#             "han_nop": datetime(2025, 7, 20).isoformat()
#         },
#         {
#             "vi_tri": "K·ªπ s∆∞ D·ªØ li·ªáu",
#             "mo_ta": "Thi·∫øt k·∫ø v√† x√¢y d·ª±ng c√°c h·ªá th·ªëng x·ª≠ l√Ω d·ªØ li·ªáu quy m√¥ l·ªõn. Ph√°t tri·ªÉn v√† duy tr√¨ data pipeline. T·ªëi ∆∞u h√≥a l∆∞u tr·ªØ v√† truy xu·∫•t d·ªØ li·ªáu. ƒê·∫£m b·∫£o ch·∫•t l∆∞·ª£ng v√† t√≠nh nh·∫•t qu√°n c·ªßa d·ªØ li·ªáu.",
#             "yeu_cau": "T·ªët nghi·ªáp ƒë·∫°i h·ªçc chuy√™n ng√†nh CNTT, Khoa h·ªçc m√°y t√≠nh ho·∫∑c t∆∞∆°ng ƒë∆∞∆°ng. Th√†nh th·∫°o c√°c c√¥ng ngh·ªá Big Data nh∆∞ Hadoop, Spark, Kafka. Kinh nghi·ªám v·ªõi c√°c h·ªá th·ªëng c∆° s·ªü d·ªØ li·ªáu SQL v√† NoSQL. K·ªπ nƒÉng l·∫≠p tr√¨nh t·ªët v·ªõi Python, Scala ho·∫∑c Java.",
#             "han_nop": datetime(2025, 6, 20).isoformat()
#         },
#         {
#             "vi_tri": "K·ªπ s∆∞ H·∫° t·∫ßng M·∫°ng",
#             "mo_ta": "Thi·∫øt k·∫ø, tri·ªÉn khai v√† b·∫£o tr√¨ h·ªá th·ªëng m·∫°ng c·ªßa c√¥ng ty. Qu·∫£n l√Ω c√°c thi·∫øt b·ªã m·∫°ng nh∆∞ router, switch, firewall. Gi·∫£i quy·∫øt s·ª± c·ªë v√† t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t m·∫°ng. ƒê·∫£m b·∫£o t√≠nh kh·∫£ d·ª•ng v√† an to√†n c·ªßa h·ªá th·ªëng m·∫°ng.",
#             "yeu_cau": "C√≥ √≠t nh·∫•t 3 nƒÉm kinh nghi·ªám trong qu·∫£n tr·ªã m·∫°ng. C√≥ ch·ª©ng ch·ªâ CCNA, CCNP ho·∫∑c t∆∞∆°ng ƒë∆∞∆°ng. Ki·∫øn th·ª©c s√¢u v·ªÅ c√°c giao th·ª©c m·∫°ng, VPN, VLAN, routing v√† switching. Kinh nghi·ªám v·ªõi c√°c thi·∫øt b·ªã c·ªßa Cisco, Juniper ho·∫∑c c√°c nh√† cung c·∫•p kh√°c.",
#             "han_nop": datetime(2025, 6, 20).isoformat()
#         },
#         {
#             "vi_tri": "K·ªπ s∆∞ Machine Learning",
#             "mo_ta": "Ph√°t tri·ªÉn v√† tri·ªÉn khai c√°c m√¥ h√¨nh machine learning. Nghi√™n c·ª©u v√† √°p d·ª•ng c√°c thu·∫≠t to√°n m·ªõi. T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t c·ªßa c√°c m√¥ h√¨nh. H·ª£p t√°c v·ªõi c√°c ƒë·ªôi ph√°t tri·ªÉn s·∫£n ph·∫©m ƒë·ªÉ t√≠ch h·ª£p c√°c gi·∫£i ph√°p ML.",
#             "yeu_cau": "T·ªët nghi·ªáp Th·∫°c sƒ© tr·ªü l√™n v·ªÅ Khoa h·ªçc M√°y t√≠nh, To√°n h·ªçc ho·∫∑c lƒ©nh v·ª±c li√™n quan. Kinh nghi·ªám v·ªõi c√°c framework ML nh∆∞ TensorFlow, PyTorch, scikit-learn. Hi·ªÉu bi·∫øt s√¢u v·ªÅ c√°c thu·∫≠t to√°n h·ªçc m√°y v√† deep learning. K·ªπ nƒÉng l·∫≠p tr√¨nh t·ªët v·ªõi Python v√† c√°c th∆∞ vi·ªán x·ª≠ l√Ω d·ªØ li·ªáu.",
#             "han_nop": datetime(2025, 7, 20).isoformat()
#         },
#         {
#             "vi_tri": "K·ªπ s∆∞ Tr√≠ tu·ªá Nh√¢n t·∫°o",
#             "mo_ta": "Nghi√™n c·ª©u v√† ph√°t tri·ªÉn c√°c gi·∫£i ph√°p AI ti√™n ti·∫øn. X√¢y d·ª±ng c√°c h·ªá th·ªëng th√¥ng minh c√≥ kh·∫£ nƒÉng h·ªçc h·ªèi v√† ra quy·∫øt ƒë·ªãnh. T√≠ch h·ª£p c√°c c√¥ng ngh·ªá AI v√†o s·∫£n ph·∫©m c·ªßa c√¥ng ty. Theo d√µi v√† √°p d·ª•ng c√°c xu h∆∞·ªõng m·ªõi trong lƒ©nh v·ª±c AI.",
#             "yeu_cau": "T·ªët nghi·ªáp Ti·∫øn sƒ© ho·∫∑c Th·∫°c sƒ© v·ªÅ AI, ML, Khoa h·ªçc M√°y t√≠nh. Kinh nghi·ªám nghi√™n c·ª©u v√† ph√°t tri·ªÉn trong lƒ©nh v·ª±c AI. Th√†nh th·∫°o c√°c k·ªπ thu·∫≠t x·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n, th·ªã gi√°c m√°y t√≠nh ho·∫∑c h·ªçc tƒÉng c∆∞·ªùng. C√≥ c√°c c√¥ng b·ªë khoa h·ªçc l√† l·ª£i th·∫ø.",
#             "han_nop": datetime(2025, 7, 20).isoformat()
#         },
#         {
#             "vi_tri": "L·∫≠p tr√¨nh vi√™n Python",
#             "mo_ta": "Ph√°t tri·ªÉn v√† b·∫£o tr√¨ c√°c ·ª©ng d·ª•ng backend b·∫±ng Python. Thi·∫øt k·∫ø v√† tri·ªÉn khai c√°c API RESTful. T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t v√† kh·∫£ nƒÉng m·ªü r·ªông c·ªßa h·ªá th·ªëng. Vi·∫øt unit test v√† ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng m√£.",
#             "yeu_cau": "C√≥ √≠t nh·∫•t 3 nƒÉm kinh nghi·ªám l·∫≠p tr√¨nh Python. Th√†nh th·∫°o c√°c framework nh∆∞ Django, Flask ho·∫∑c FastAPI. Kinh nghi·ªám v·ªõi c∆° s·ªü d·ªØ li·ªáu SQL v√† NoSQL. Hi·ªÉu bi·∫øt v·ªÅ c√°c nguy√™n t·∫Øc thi·∫øt k·∫ø ph·∫ßn m·ªÅm v√† m√¥ h√¨nh ki·∫øn tr√∫c.",
#             "han_nop": datetime(2025, 7, 20).isoformat()
#         }
#     ]

#     # Ch√®n d·ªØ li·ªáu v√†o collection
#     result = collection.insert_many(job_descriptions)
#     logger.info(f"‚úÖ ƒê√£ ch√®n th√†nh c√¥ng {len(result.inserted_ids)} b·∫£n ghi v√†o collection 'mo_ta_cong_viec'")

#     # Ki·ªÉm tra s·ªë l∆∞·ª£ng b·∫£n ghi sau khi ch√®n
#     count = collection.count_documents({})
#     logger.info(f"üìä T·ªïng s·ªë b·∫£n ghi hi·ªán t·∫°i trong collection: {count}")

# except Exception as e:
#     logger.error(f"‚ùå L·ªói khi ch√®n d·ªØ li·ªáu v√†o MongoDB: {str(e)}")
#     raise
# finally:
#     # ƒê√≥ng k·∫øt n·ªëi
#     client.close()
#     logger.info("üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi t·ªõi MongoDB")

# # # Th√™m d·ªØ li·ªáu m·ªõi
# # collection.insert_many([
#     # {
#     #     "vi_tri": "L·∫≠p tr√¨nh vi√™n Python",
#     #     "mo_ta": "Tham gia ph√°t tri·ªÉn h·ªá th·ªëng API ph·ª•c v·ª• n·ªÅn t·∫£ng h·ªçc tr·ª±c tuy·∫øn quy m√¥ l·ªõn. L√†m vi·ªác c√πng ƒë·ªôi ng≈© backend ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t h·ªá th·ªëng.",
#     #     "yeu_cau": "T·ªët nghi·ªáp ƒê·∫°i h·ªçc chuy√™n ng√†nh CNTT. 2‚Äì3 nƒÉm kinh nghi·ªám ph√°t tri·ªÉn Python (Flask ho·∫∑c FastAPI). C√≥ ki·∫øn th·ª©c v·ªÅ c∆° s·ªü d·ªØ li·ªáu MongoDB, PostgreSQL. Hi·ªÉu bi·∫øt v·ªÅ CI/CD v√† tri·ªÉn khai Docker l√† l·ª£i th·∫ø.",
#     #     "han_nop": datetime(2025, 6, 30)
#     # },
#     # {
#     #     "vi_tri": "Chuy√™n vi√™n Ph√¢n t√≠ch D·ªØ li·ªáu",
#     #     "mo_ta": "Ph√¢n t√≠ch s·ªë li·ªáu b√°n h√†ng, x√¢y d·ª±ng b√°o c√°o h·ªó tr·ª£ ban l√£nh ƒë·∫°o ra quy·∫øt ƒë·ªãnh kinh doanh.",
#     #     "yeu_cau": "T·ªëi thi·ªÉu 2 nƒÉm kinh nghi·ªám ph√¢n t√≠ch d·ªØ li·ªáu th·ª±c t·∫ø. Th√†nh th·∫°o SQL, Excel n√¢ng cao, Power BI ho·∫∑c Tableau. Bi·∫øt x·ª≠ l√Ω d·ªØ li·ªáu v·ªõi Python (pandas, numpy). T∆∞ duy logic v√† kh·∫£ nƒÉng tr√¨nh b√†y t·ªët.",
#     #     "han_nop": datetime(2025, 7, 10)
#     # },
#     # {
#     #     "vi_tri": "Chuy√™n vi√™n Marketing Online",
#     #     "mo_ta": "Qu·∫£n l√Ω v√† tri·ªÉn khai c√°c chi·∫øn d·ªãch qu·∫£ng c√°o tr√™n n·ªÅn t·∫£ng Google Ads v√† Facebook.",
#     #     "yeu_cau": "1‚Äì3 nƒÉm kinh nghi·ªám ch·∫°y qu·∫£ng c√°o performance. C√≥ hi·ªÉu bi·∫øt v·ªÅ SEO, content marketing l√† l·ª£i th·∫ø. K·ªπ nƒÉng ph√¢n t√≠ch d·ªØ li·ªáu marketing t·ªët.",
#     #     "han_nop": datetime(2025, 6, 25)
#     # },
#     # {
#     #     "vi_tri": "Nh√¢n vi√™n H√†nh ch√≠nh ‚Äì Nh√¢n s·ª±",
#     #     "mo_ta": "Qu·∫£n l√Ω h·ªì s∆° nh√¢n s·ª±, h·ªó tr·ª£ tuy·ªÉn d·ª•ng v√† ch·∫•m c√¥ng l∆∞∆°ng th∆∞·ªüng.",
#     #     "yeu_cau": "C√≥ kinh nghi·ªám 1 nƒÉm tr·ªü l√™n ·ªü v·ªã tr√≠ t∆∞∆°ng ƒë∆∞∆°ng. Bi·∫øt s·ª≠ d·ª•ng ph·∫ßn m·ªÅm HRM nh∆∞ Bravo, BaseHR. K·ªπ nƒÉng giao ti·∫øp v√† x·ª≠ l√Ω t√¨nh hu·ªëng t·ªët.",
#     #     "han_nop": datetime(2025, 6, 30)
#     # },
#     # {
#     #     "vi_tri": "UI/UX Designer",
#     #     "mo_ta": "Thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng cho website v√† ·ª©ng d·ª•ng mobile.",
#     #     "yeu_cau": "2+ nƒÉm kinh nghi·ªám thi·∫øt k·∫ø UI/UX. S·ª≠ d·ª•ng th√†nh th·∫°o Figma, Adobe XD. C√≥ t∆∞ duy logic v·ªÅ lu·ªìng ng∆∞·ªùi d√πng v√† tr·∫£i nghi·ªám.",
#     #     "han_nop": datetime(2025, 7, 15)
#     # },
#     # {
#     #     "vi_tri": "L·∫≠p tr√¨nh vi√™n ReactJS",
#     #     "mo_ta": "Ph√°t tri·ªÉn giao di·ªán frontend t∆∞∆°ng t√°c cho c√°c ·ª©ng d·ª•ng n·ªôi b·ªô.",
#     #     "yeu_cau": "√çt nh·∫•t 2 nƒÉm kinh nghi·ªám v·ªõi ReactJS. Hi·ªÉu bi·∫øt v·ªÅ Redux, Hooks, Context API. Bi·∫øt d√πng TailwindCSS l√† ƒëi·ªÉm c·ªông.",
#     #     "han_nop": datetime(2025, 7, 1)
#     # },
#     # {
#     #     "vi_tri": "DevOps Engineer",
#     #     "mo_ta": "Qu·∫£n l√Ω CI/CD pipeline, ƒë·∫£m b·∫£o h·ªá th·ªëng ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh v√† c√≥ kh·∫£ nƒÉng m·ªü r·ªông.",
#     #     "yeu_cau": "2‚Äì4 nƒÉm kinh nghi·ªám tri·ªÉn khai DevOps. Th√†nh th·∫°o Docker, Jenkins, GitLab CI/CD. Bi·∫øt d√πng Kubernetes v√† gi√°m s√°t Prometheus/Grafana.",
#     #     "han_nop": datetime(2025, 7, 20)
#     # },
#     # {
#     #     "vi_tri": "Chuy√™n vi√™n T∆∞ v·∫•n Tuy·ªÉn d·ª•ng",
#     #     "mo_ta": "L√†m vi·ªác v·ªõi c√°c b·ªô ph·∫≠n ƒë·ªÉ x√°c ƒë·ªãnh nhu c·∫ßu tuy·ªÉn d·ª•ng, tri·ªÉn khai quy tr√¨nh ph·ªèng v·∫•n.",
#     #     "yeu_cau": "T·ªëi thi·ªÉu 1 nƒÉm kinh nghi·ªám tuy·ªÉn d·ª•ng. K·ªπ nƒÉng giao ti·∫øp, ph·ªèng v·∫•n ·ª©ng vi√™n t·ªët. Bi·∫øt s·ª≠ d·ª•ng h·ªá th·ªëng ATS l√† l·ª£i th·∫ø.",
#     #     "han_nop": datetime(2025, 6, 28)
#     # },
#     # {
#     #     "vi_tri": "Chuy√™n vi√™n SEO Content",
#     #     "mo_ta": "Vi·∫øt b√†i chu·∫©n SEO cho website, x√¢y d·ª±ng n·ªôi dung ph·ª•c v·ª• marketing.",
#     #     "yeu_cau": "Hi·ªÉu c∆° b·∫£n v·ªÅ c√¥ng c·ª• Google Search Console, Ahrefs. C√≥ kinh nghi·ªám vi·∫øt b√†i blog ho·∫∑c landing page. Bi·∫øt vi·∫øt n·ªôi dung chuy·ªÉn ƒë·ªïi t·ªët.",
#     #     "han_nop": datetime(2025, 7, 12)
#     # },
#     # {
#     #     "vi_tri": "Chuy√™n vi√™n H·ªó tr·ª£ Kh√°ch h√†ng",
#     #     "mo_ta": "Ti·∫øp nh·∫≠n, x·ª≠ l√Ω khi·∫øu n·∫°i v√† h·ªó tr·ª£ ng∆∞·ªùi d√πng s·ª≠ d·ª•ng s·∫£n ph·∫©m d·ªãch v·ª•.",
#     #     "yeu_cau": "1 nƒÉm kinh nghi·ªám CSKH. Gi·ªçng n√≥i d·ªÖ nghe, th√¢n thi·ªán. S·ª≠ d·ª•ng th√†nh th·∫°o c√¥ng c·ª• chat & CRM nh∆∞ Zendesk.",
#     #     "han_nop": datetime(2025, 7, 5)
#     # }
# # ])

# # print("‚úÖ ƒê√£ ch√®n l·∫°i to√†n b·ªô m√¥ t·∫£ c√¥ng vi·ªác")

# from pymongo import MongoClient
# from datetime import datetime
# import logging

# # C·∫•u h√¨nh logging
# logging.basicConfig(level=logging.INFO)
# logger = logging.getLogger("InitUsers")

# try:
#     # K·∫øt n·ªëi MongoDB
#     client = MongoClient("mongodb://localhost:27017/", serverSelectionTimeoutMS=5000)
#     client.server_info()  # Ki·ªÉm tra k·∫øt n·ªëi
#     logger.info("‚úÖ K·∫øt n·ªëi t·ªõi MongoDB th√†nh c√¥ng")
# except Exception as e:
#     logger.error(f"‚ùå L·ªói k·∫øt n·ªëi MongoDB: {e}")
#     raise

# # Ch·ªçn database v√† collection
# from pymongo import MongoClient
# from datetime import datetime
# import logging

# # C·∫•u h√¨nh logging
# logging.basicConfig(level=logging.INFO)
# logger = logging.getLogger(__name__)

# # K·∫øt n·ªëi MongoDB
# client = MongoClient("mongodb://localhost:27017", serverSelectionTimeoutMS=5000)
# db = client["tuyendung"]
# collection = db["users"]

# try:
#     # X√°c nh·∫≠n x√≥a
#     confirm = input("B·∫°n c√≥ mu·ªën x√≥a to√†n b·ªô ng∆∞·ªùi d√πng c≈©? (y/n): ")
#     if confirm.lower() == "y":
#         deleted = collection.delete_many({})
#         logger.info(f"üóëÔ∏è ƒê√£ x√≥a {deleted.deleted_count} ng∆∞·ªùi d√πng c≈©")
#     else:
#         logger.info("‚ùå Kh√¥ng x√≥a ng∆∞·ªùi d√πng c≈©")

#     # D·ªØ li·ªáu m·∫´u (b·ªï sung tr∆∞·ªùng 'name')
#     user_data = [
#         {"username": "admin", "name": "Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng", "role": "Qu·∫£n tr·ªã vi√™n", "created_at": datetime.now()},
#         {"username": "hr01", "name": "Nguy·ªÖn VƒÉn A", "role": "Nh√¢n s·ª±", "created_at": datetime.now()},
#         {"username": "viewer01", "name": "L√™ Th·ªã B", "role": "Ng∆∞·ªùi xem", "created_at": datetime.now()},
#     ]

#     result = collection.insert_many(user_data)
#     logger.info(f"‚úÖ ƒê√£ th√™m {len(result.inserted_ids)} ng∆∞·ªùi d√πng")

#     count = collection.count_documents({})
#     logger.info(f"üìä T·ªïng s·ªë ng∆∞·ªùi d√πng: {count}")

# except Exception as e:
#     logger.error(f"‚ùå L·ªói khi kh·ªüi t·∫°o d·ªØ li·ªáu ng∆∞·ªùi d√πng: {e}")
#     raise
# finally:
#     client.close()
#     logger.info("üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB")
