# import os
# import re
# import unicodedata
# import shutil

# # ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
# pdf_folder = "/root/FE/recruitment-api/file_pdf_word/output_cv_pdf"
# word_folder = "/root/FE/recruitment-api/file_pdf_word/output_cv_word"
# cv_folder = "/root/FE/recruitment-api/cv_files"

# # H√†m chu·∫©n ho√° t√™n file (VD: ƒê·∫∑ng ‚Üí Dang)
# def normalize_filename(filename):
#     name, ext = os.path.splitext(filename)

#     # Thay th·∫ø ƒë·∫∑c bi·ªát tr∆∞·ªõc khi remove d·∫•u
#     name = name.replace("ƒê", "D").replace("ƒë", "d")

#     # Remove d·∫•u c√°c k√Ω t·ª± kh√°c
#     normalized = unicodedata.normalize('NFKD', name).encode('ascii', 'ignore').decode('utf-8')

#     # Thay th·∫ø kho·∫£ng tr·∫Øng b·∫±ng d·∫•u _
#     normalized = re.sub(r"\s+", "_", normalized.strip())

#     return normalized + ext


# # B∆∞·ªõc 1: X√ìA H·∫æT FILE HI·ªÜN T·∫†I TRONG FOLDER cv_files
# deleted = 0
# for file in os.listdir(cv_folder):
#     file_path = os.path.join(cv_folder, file)
#     try:
#         os.remove(file_path)
#         deleted += 1
#     except Exception as e:
#         print(f"‚ùå L·ªói xo√° {file}: {e}")
# print(f"üóëÔ∏è ƒê√£ xo√° {deleted} file trong th∆∞ m·ª•c cv_files.")

# # B∆∞·ªõc 2: CHUY·ªÇN FILE L·∫∫ ‚Üí .docx, FILE CH·∫¥N ‚Üí .pdf V√Ä COPY V√ÄO cv_files
# index = 1
# moved = 0

# for folder in [pdf_folder, word_folder]:
#     files = sorted(os.listdir(folder))  # ƒë·∫£m b·∫£o x·ª≠ l√Ω theo th·ª© t·ª±
#     for file in files:
#         src = os.path.join(folder, file)
#         ext = ".docx" if index % 2 == 1 else ".pdf"
#         if not file.lower().endswith(ext):
#             index += 1
#             continue

#         # Chu·∫©n ho√° t√™n file (Dang_Hoa_1.pdf)
#         new_name = normalize_filename(file)
#         dst = os.path.join(cv_folder, new_name)

#         try:
#             shutil.copy2(src, dst)
#             print(f"‚úÖ ƒê√£ chuy·ªÉn: {file} ‚Üí {new_name}")
#             index += 1
#             moved += 1
#         except Exception as e:
#             print(f"‚ùå Kh√¥ng th·ªÉ chuy·ªÉn {file}: {e}")

# print(f"üìÅ T·ªïng s·ªë file ƒë√£ chuy·ªÉn v√†o cv_files: {moved}")

####################3
#CAP NHAT TEN FILE
from pymongo import MongoClient
import os
import re

client = MongoClient("mongodb://localhost:27017")
db = client["recruitment"]
collection = db["candidates"]

cv_folder = "cv_files"
files = sorted(os.listdir(cv_folder))  # S·∫Øp x·∫øp ƒë·ªÉ gi·ªØ th·ª© t·ª±

# √Ånh x·∫°: s·ªë cu·ªëi file ‚Üí t√™n file
file_mapping = {}
for file in files:
    match = re.search(r"_(\d+)\.(pdf|docx)$", file)
    if match:
        index = int(match.group(1))
        file_mapping[index] = file

# L·∫•y to√†n b·ªô ·ª©ng vi√™n theo th·ª© t·ª± insert
docs = list(collection.find().sort("_id", 1))  # ho·∫∑c sort theo 'ngay_nop'

updated = 0
not_found = 0

for i, doc in enumerate(docs, 1):  # i = 1, 2, 3, ...
    filename = file_mapping.get(i)
    if filename:
        collection.update_one(
            {"_id": doc["_id"]},
            {"$set": {"cv_filepath": f"cv_files/{filename}"}}
        )
        print(f"‚úÖ C·∫≠p nh·∫≠t: {doc.get('ho_ten', 'Kh√¥ng r√µ')} ‚Üí {filename}")
        updated += 1
    else:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file cho ·ª©ng vi√™n {i} ({doc.get('ho_ten', 'Kh√¥ng r√µ')})")
        not_found += 1

print(f"\nüéØ T·ªïng c·∫≠p nh·∫≠t th√†nh c√¥ng: {updated}")
print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file ·ª©ng v·ªõi: {not_found} ·ª©ng vi√™n")
